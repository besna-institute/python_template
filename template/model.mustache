from dataclasses import asdict, dataclass
from typing import Any, Dict, List, Optional, Type, TypeVar

{{#models}}
{{#model}}
{{#pyImports}}
{{import}}
{{/pyImports}}
{{/model}}
{{/models}}
{{#models}}
{{#model}}
_{{classname}} = TypeVar("_{{classname}}", bound="{{classname}}")

@dataclass
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    {{classname}} - a model defined in OpenAPI

    {{#vars}}
        {{baseName}}: The {{baseName}} of this {{classname}}{{^required}} [Optional]{{/required}}.
    {{/vars}}
    """
{{#vars}}
    {{^defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}Optional[{{>model_field_type}}] = None{{/required}}
    {{/defaultValue}}
{{/vars}}
{{#vars}}
    {{#defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}Optional[{{>model_field_type}}]{{/required}} = {{{defaultValue}}}
    {{/defaultValue}}
{{/vars}}

    @classmethod
    def from_dict(cls: Type[_{{classname}}], input: Dict[str, Any]) -> _{{classname}}:
        return cls(
            {{#vars}}
            {{#isArray}}
            {{baseName}}=[{{complexType}}.from_dict(v) for v in input["{{baseName}}"]],
            {{/isArray}}
            {{^isArray}}
            {{baseName}}=input["{{baseName}}"],
            {{/isArray}}
            {{/vars}}
        )
{{/model}}
{{/models}}
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
