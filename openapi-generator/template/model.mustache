from dataclasses import asdict, dataclass
from typing import Any, Optional, Type, TypeVar

{{#models}}
{{#model}}
{{#pyImports}}
{{import}}
{{/pyImports}}
{{/model}}
{{/models}}
{{#models}}
{{#model}}
_{{classname}} = TypeVar("_{{classname}}", bound="{{classname}}")

@dataclass
class {{classname}}:
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    {{classname}} - a model defined in OpenAPI

    {{#vars}}
        {{baseName}}: The {{baseName}} of this {{classname}}{{^required}} [Optional]{{/required}}.
    {{/vars}}
    """
{{#vars}}
    {{^defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}Optional[{{>model_field_type}}] = None{{/required}}
    {{/defaultValue}}
{{/vars}}
{{#vars}}
    {{#defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}Optional[{{>model_field_type}}]{{/required}} = {{#isContainer}}None{{/isContainer}}{{^isContainer}}{{{defaultValue}}}{{/isContainer}}
    {{/defaultValue}}
{{/vars}}

    @classmethod
    def from_dict(cls: Type[_{{classname}}], input: dict[str, Any]) -> _{{classname}}:
        return cls(
            {{#vars}}
              {{#isArray}}
                {{#isPrimitiveType}}
                  {{baseName}}=
                    {{#required}}
                      input["{{baseName}}"]
                    {{/required}}
                    {{^required}}
                      input.get("{{baseName}}", {{{defaultValue}}})
                    {{/required}}
                  ,
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                  {{baseName}}=
                    {{#required}}
                      [{{complexType}}.from_dict(v) for v in input["{{baseName}}"]]
                    {{/required}}
                    {{^required}}
                      [{{complexType}}.from_dict(v) for v in input["{{baseName}}"]] if "{{baseName}}" in input else
                      {{#defaultValue}}
                        {{{defaultValue}}}
                      {{/defaultValue}}
                      {{^defaultValue}}
                        None
                      {{/defaultValue}}
                    {{/required}}
                  ,
                {{/isPrimitiveType}}
              {{/isArray}}
              {{^isArray}}
                {{baseName}}=
                  {{#required}}
                    input["{{baseName}}"]
                  {{/required}}
                  {{^required}}
                    input.get("{{baseName}}", {{{defaultValue}}})
                  {{/required}}
                ,
              {{/isArray}}
            {{/vars}}
        )
{{/model}}
{{/models}}
    def to_dict(self) -> dict[str, Any]:
        return asdict(self)
