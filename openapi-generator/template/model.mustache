{{#models}}
{{#model}}
{{^isEnum}}
from dataclasses import asdict, dataclass
from {{modelPackage}}._util import dict_factory
{{/isEnum}}
{{#isEnum}}
from enum import Enum, unique
{{/isEnum}}
{{/model}}
{{/models}}
from typing import Any, Optional, Type, TypeVar, List, Dict

{{#models}}
{{#model}}
{{#pyImports}}
{{import}}
{{/pyImports}}
{{/model}}
{{/models}}
{{#models}}
{{#model}}
{{^isEnum}}
_{{classname}} = TypeVar("_{{classname}}", bound="{{classname}}")


@dataclass
class {{classname}}:
{{/isEnum}}
{{#isEnum}}
@unique
class {{classname}}(Enum):
{{/isEnum}}
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.

    {{classname}} - a model defined in OpenAPI

    {{^isEnum}}
    {{#vars}}
        {{baseName}}: The {{baseName}} of this {{classname}}{{^required}} [Optional]{{/required}}.
    {{/vars}}
    {{/isEnum}}
    {{#isEnum}}
        members:
        {{#allowableValues}}
        {{#enumVars}}
            {{name}}
        {{/enumVars}}
        {{/allowableValues}}
    {{/isEnum}}
    """
{{^isEnum}}
{{#vars}}
    {{^defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}{{>model_field_type}} | None = None{{/required}}
    {{/defaultValue}}
{{/vars}}
{{#vars}}
    {{#defaultValue}}
    {{baseName}}: {{#required}}{{>model_field_type}}{{/required}}{{^required}}{{>model_field_type}} | None{{/required}} = {{#isContainer}}None{{/isContainer}}{{^isContainer}}{{{defaultValue}}}{{/isContainer}}
    {{/defaultValue}}
{{/vars}}

    @classmethod
    def from_dict(cls: Type[_{{classname}}], input: dict[str, Any]) -> _{{classname}}:
        return cls(
            {{#vars}}
              {{#isArray}}
                {{#isPrimitiveType}}
                  {{baseName}}={{>model_get_dict_value}},
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
                  {{baseName}}=
                    {{#required}}
                      [{{complexType}}.from_dict(v) for v in input["{{baseName}}"]]
                    {{/required}}
                    {{^required}}
                      [{{complexType}}.from_dict(v) for v in input["{{baseName}}"]] if "{{baseName}}" in input else
                      {{#defaultValue}}
                        {{{defaultValue}}}
                      {{/defaultValue}}
                      {{^defaultValue}}
                        None
                      {{/defaultValue}}
                    {{/required}}
                  ,
                {{/isPrimitiveType}}
              {{/isArray}}
              {{^isArray}}
                {{baseName}}={{>model_get_dict_value}},
              {{/isArray}}
            {{/vars}}
        )
    def to_dict(self) -> dict[str, Any]:
        return asdict(self, dict_factory=dict_factory)
{{/isEnum}}
{{#isEnum}}
{{#allowableValues}}
{{#enumVars}}
    {{name}}={{{value}}}
{{/enumVars}}
{{/allowableValues}}
{{/isEnum}}
{{/model}}
{{/models}}
